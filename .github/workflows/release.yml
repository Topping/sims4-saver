name: Build and Release

on: 
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: uv sync

    - name: Run Windows Build Script
      run: .\build.bat

    - name: Upload Windows Executable
      uses: actions/upload-artifact@v4
      with:
        name: sims-saver-windows
        path: dist/sims-saver.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: uv sync

    - name: Run macOS Build Script
      run: chmod +x build.sh && ./build.sh

    - name: Upload macOS Application Bundle
      uses: actions/upload-artifact@v4
      with:
        name: sims-saver-macos
        path: dist/Sims4-Saver.app

  release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create/update GitHub Release, push tags
      issues: write   # For semantic-release to manage issues (optional, but good for linking)
      pull-requests: write # For semantic-release to manage PRs (optional)
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for semantic-release to analyze history
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install uv
        uv sync
        pip install python-semantic-release

    - name: Git Config
      run: |
        git config user.name github-actions[bot]
        git config user.email github-actions[bot]@users.noreply.github.com

    - name: Semantic Release Publish
      id: semantic
      run: | 
        semantic-release publish --no-build # Assuming PyInstaller builds are done in previous jobs
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded artifacts
      run: ls -R artifacts

    - name: Attach Assets to GitHub Release
      if: ${{ steps.semantic.outputs.new_release_published == 'true' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.semantic.outputs.tag_name }}
        files: |
          artifacts/sims-saver-windows/sims-saver.exe
          artifacts/sims-saver-macos/Sims4-Saver.app/*
        append_body: true
        body_path: CHANGELOG.md # semantic-release creates this with release notes
